{"version":3,"file":"265-fc8b6a917470d023d7cb.js","mappings":"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","sources":["webpack://portfolio/./src/components/PerformanceMonitor.js"],"sourcesContent":["import { useEffect } from 'react';\n\nconst PerformanceMonitor = () => {\n  useEffect(() => {\n    // Only run in production and if performance API is available\n    if (\n      process.env.NODE_ENV !== 'production' ||\n      typeof window === 'undefined' ||\n      !window.performance\n    ) {\n      return;\n    }\n\n    // Core Web Vitals monitoring - define reportMetric at top level\n    const reportMetric = (metric) => {\n      // In a real app, you'd send this to your analytics service\n      console.log(`Performance metric: ${metric.name}`, metric.value);\n\n      // Optional: Send to Google Analytics or other analytics service\n      if (typeof gtag !== 'undefined') {\n        gtag('event', metric.name, {\n          event_category: 'Web Vitals',\n          value: Math.round(metric.name === 'CLS' ? metric.value * 1000 : metric.value),\n          event_label: metric.id,\n          non_interaction: true,\n        });\n      }\n    };\n\n    const reportPerformanceMetrics = () => {\n      // Monitor Core Web Vitals\n      if ('PerformanceObserver' in window) {\n        // Largest Contentful Paint (LCP)\n        const lcpObserver = new PerformanceObserver((entryList) => {\n          const entries = entryList.getEntries();\n          const lastEntry = entries[entries.length - 1];\n\n          reportMetric({\n            name: 'LCP',\n            value: lastEntry.startTime,\n            id: `${lastEntry.startTime}-${Math.random()}`,\n          });\n        });\n\n        // First Input Delay (FID)\n        const fidObserver = new PerformanceObserver((entryList) => {\n          for (const entry of entryList.getEntries()) {\n            reportMetric({\n              name: 'FID',\n              value: entry.processingStart - entry.startTime,\n              id: `${entry.startTime}-${Math.random()}`,\n            });\n          }\n        });\n\n        // Cumulative Layout Shift (CLS)\n        let clsValue = 0;\n        const clsObserver = new PerformanceObserver((entryList) => {\n          for (const entry of entryList.getEntries()) {\n            if (!entry.hadRecentInput) {\n              clsValue += entry.value;\n            }\n          }\n\n          reportMetric({\n            name: 'CLS',\n            value: clsValue,\n            id: `${Date.now()}-${Math.random()}`,\n          });\n        });\n\n        // Time to First Byte (TTFB)\n        const ttfbObserver = new PerformanceObserver((entryList) => {\n          for (const entry of entryList.getEntries()) {\n            if (entry.entryType === 'navigation') {\n              reportMetric({\n                name: 'TTFB',\n                value: entry.responseStart - entry.requestStart,\n                id: `${entry.startTime}-${Math.random()}`,\n              });\n            }\n          }\n        });\n\n        try {\n          lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });\n          fidObserver.observe({ entryTypes: ['first-input'] });\n          clsObserver.observe({ entryTypes: ['layout-shift'] });\n          ttfbObserver.observe({ entryTypes: ['navigation'] });\n        } catch (error) {\n          // Some browsers might not support all entry types\n          console.warn('Performance monitoring setup error:', error);\n        }\n\n        // Clean up observers on unmount\n        return () => {\n          lcpObserver.disconnect();\n          fidObserver.disconnect();\n          clsObserver.disconnect();\n          ttfbObserver.disconnect();\n        };\n      }\n\n      // Fallback for older browsers - basic timing metrics\n      window.addEventListener('load', () => {\n        setTimeout(() => {\n          const navigation = performance.getEntriesByType('navigation')[0];\n          if (navigation) {\n            reportMetric({\n              name: 'Page Load Time',\n              value: navigation.loadEventEnd - navigation.fetchStart,\n              id: `page-load-${Date.now()}`,\n            });\n\n            reportMetric({\n              name: 'DOM Content Loaded',\n              value: navigation.domContentLoadedEventEnd - navigation.fetchStart,\n              id: `dcl-${Date.now()}`,\n            });\n          }\n        }, 0);\n      });\n    };\n\n    // Monitor resource loading performance\n    const monitorResourcePerformance = () => {\n      const resourceObserver = new PerformanceObserver((entryList) => {\n        for (const entry of entryList.getEntries()) {\n          // Monitor slow loading resources\n          if (entry.duration > 1000) {\n            console.warn(`Slow resource detected: ${entry.name} took ${entry.duration}ms`);\n          }\n\n          // Monitor large resources\n          if (entry.transferSize > 100000) {\n            // 100KB\n            console.warn(`Large resource detected: ${entry.name} is ${entry.transferSize} bytes`);\n          }\n        }\n      });\n\n      try {\n        resourceObserver.observe({ entryTypes: ['resource'] });\n        return () => resourceObserver.disconnect();\n      } catch (error) {\n        console.warn('Resource performance monitoring setup error:', error);\n      }\n    };\n\n    // Monitor memory usage (Chrome only)\n    const monitorMemoryUsage = () => {\n      if ('memory' in performance) {\n        const logMemoryUsage = () => {\n          const { memory } = performance;\n          console.log('Memory usage:', {\n            used: `${(memory.usedJSHeapSize / 1048576).toFixed(2)} MB`,\n            total: `${(memory.totalJSHeapSize / 1048576).toFixed(2)} MB`,\n            limit: `${(memory.jsHeapSizeLimit / 1048576).toFixed(2)} MB`,\n          });\n        };\n\n        // Log memory usage every 30 seconds\n        const memoryInterval = setInterval(logMemoryUsage, 30000);\n\n        return () => clearInterval(memoryInterval);\n      }\n    };\n\n    // Monitor long tasks\n    const monitorLongTasks = () => {\n      if ('PerformanceObserver' in window) {\n        const longTaskObserver = new PerformanceObserver((entryList) => {\n          for (const entry of entryList.getEntries()) {\n            console.warn(`Long task detected: ${entry.duration}ms`);\n\n            reportMetric({\n              name: 'Long Task',\n              value: entry.duration,\n              id: `long-task-${entry.startTime}`,\n            });\n          }\n        });\n\n        try {\n          longTaskObserver.observe({ entryTypes: ['longtask'] });\n          return () => longTaskObserver.disconnect();\n        } catch (error) {\n          console.warn('Long task monitoring setup error:', error);\n        }\n      }\n    };\n\n    // Initialize all monitoring\n    const cleanupFunctions = [\n      reportPerformanceMetrics(),\n      monitorResourcePerformance(),\n      monitorMemoryUsage(),\n      monitorLongTasks(),\n    ].filter(Boolean);\n\n    // Cleanup function\n    return () => {\n      cleanupFunctions.forEach((cleanup) => cleanup?.());\n    };\n  }, []);\n\n  return null; // This component doesn't render anything\n};\n\nexport default PerformanceMonitor;\n"],"names":["PerformanceMonitor","useEffect","window","performance","reportMetric","metric","console","log","name","value","gtag","event_category","Math","round","event_label","id","non_interaction","cleanupFunctions","reportPerformanceMetrics","lcpObserver","PerformanceObserver","entryList","entries","getEntries","lastEntry","length","startTime","random","fidObserver","entry","processingStart","clsValue","clsObserver","hadRecentInput","Date","now","ttfbObserver","entryType","responseStart","requestStart","observe","entryTypes","error","warn","disconnect","addEventListener","setTimeout","navigation","getEntriesByType","loadEventEnd","fetchStart","domContentLoadedEventEnd","monitorResourcePerformance","resourceObserver","duration","transferSize","monitorMemoryUsage","memoryInterval","setInterval","logMemoryUsage","memory","used","usedJSHeapSize","toFixed","total","totalJSHeapSize","limit","jsHeapSizeLimit","clearInterval","monitorLongTasks","longTaskObserver","filter","Boolean","forEach","cleanup"],"sourceRoot":""}